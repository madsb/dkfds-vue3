import { describe, it, expect, vi } from 'vitest'
import { mount } from '@vue/test-utils'
import FdsInput from '../fds-input.vue'

// Mock the formId composable
vi.mock('dkfds-vue3-utils', () => ({
  formId: (id?: string, autogen?: boolean) => {
    return {
      formid: id || (autogen ? 'fid_autogenerated' : undefined)
    }
  }
}))

describe('FdsInput', () => {
  describe('Rendering', () => {
    it('renders input element', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      expect(wrapper.find('input').exists()).toBe(true)
    })

    it('renders with form-input class', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      expect(wrapper.find('input').classes()).toContain('form-input')
      expect(wrapper.find('input').classes()).toContain('d-flex')
    })

    it('renders with correct wrapper class when no prefix/suffix', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      expect(wrapper.find('div').classes()).toContain('flex-items-center')
    })
  })

  describe('v-model', () => {
    it('binds modelValue to input value', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          modelValue: 'initial value'
        }
      })
      expect(wrapper.find('input').element.value).toBe('initial value')
    })

    it('emits update:modelValue when input changes', async () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          modelValue: ''
        }
      })
      
      await wrapper.find('input').setValue('new value')
      expect(wrapper.emitted('update:modelValue')).toBeTruthy()
      expect(wrapper.emitted('update:modelValue')[0]).toEqual(['new value'])
    })

    it('updates input when modelValue prop changes', async () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          modelValue: 'initial'
        }
      })
      
      await wrapper.setProps({ modelValue: 'updated' })
      expect(wrapper.find('input').element.value).toBe('updated')
    })
  })

  describe('Prefix and Suffix', () => {
    it('renders prefix when provided', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          prefix: '$'
        }
      })
      
      const prefix = wrapper.find('.form-input-prefix')
      expect(prefix.exists()).toBe(true)
      expect(prefix.text()).toBe('$')
      expect(prefix.attributes('aria-hidden')).toBe('true')
      expect(wrapper.find('div').classes()).toContain('form-input-wrapper')
      expect(wrapper.find('div').classes()).toContain('form-input-wrapper--prefix')
    })

    it('renders suffix when provided', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          suffix: 'kr'
        }
      })
      
      const suffix = wrapper.find('.form-input-suffix')
      expect(suffix.exists()).toBe(true)
      expect(suffix.text()).toBe('kr')
      expect(suffix.attributes('aria-hidden')).toBe('true')
      expect(wrapper.find('div').classes()).toContain('form-input-wrapper')
      expect(wrapper.find('div').classes()).toContain('form-input-wrapper--suffix')
    })

    it('does not render prefix/suffix when not provided', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      
      expect(wrapper.find('.form-input-prefix').exists()).toBe(false)
      expect(wrapper.find('.form-input-suffix').exists()).toBe(false)
    })
  })

  describe('Slots', () => {
    it('renders button slot', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' },
        slots: {
          button: '<button>Search</button>'
        }
      })
      
      expect(wrapper.find('button').exists()).toBe(true)
      expect(wrapper.find('button').text()).toBe('Search')
      expect(wrapper.find('div').classes()).toContain('search')
    })
  })

  describe('Events', () => {
    it('emits dirty event on blur', async () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      
      await wrapper.find('input').trigger('blur')
      expect(wrapper.emitted('dirty')).toBeTruthy()
      expect(wrapper.emitted('dirty')[0]).toEqual([true])
    })
  })

  describe('Props and Attributes', () => {
    it('applies id to input element', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'custom-id' }
      })
      
      const input = wrapper.find('input')
      expect(input.attributes('id')).toBe('custom-id')
      expect(input.attributes('name')).toBe('custom-id')
    })

    it('generates id when autogen is true', () => {
      const wrapper = mount(FdsInput)
      
      const input = wrapper.find('input')
      expect(input.attributes('id')).toBe('fid_autogenerated')
      expect(input.attributes('name')).toBe('fid_autogenerated')
    })

    it('passes through native input attributes', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' },
        attrs: {
          placeholder: 'Enter text',
          disabled: true,
          readonly: true,
          maxlength: '50',
          'aria-label': 'Input field',
          'data-testid': 'test-input'
        }
      })
      
      const input = wrapper.find('input')
      expect(input.attributes('placeholder')).toBe('Enter text')
      expect(input.attributes('disabled')).toBeDefined()
      expect(input.attributes('readonly')).toBeDefined()
      expect(input.attributes('maxlength')).toBe('50')
      expect(input.attributes('aria-label')).toBe('Input field')
      expect(input.attributes('data-testid')).toBe('test-input')
    })

    it('always renders as type="text"', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'test-input' }
      })
      
      expect(wrapper.find('input').attributes('type')).toBe('text')
    })
  })

  describe('Edge cases', () => {
    it('handles empty modelValue', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          modelValue: ''
        }
      })
      
      expect(wrapper.find('input').element.value).toBe('')
    })

    it('handles null values gracefully', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          modelValue: null,
          prefix: null,
          suffix: null
        }
      })
      
      expect(wrapper.find('input').element.value).toBe('')
      expect(wrapper.find('.form-input-prefix').exists()).toBe(false)
      expect(wrapper.find('.form-input-suffix').exists()).toBe(false)
    })

    it('handles both prefix and suffix (suffix takes precedence in CSS class)', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          prefix: '$',
          suffix: 'USD'
        }
      })
      
      expect(wrapper.find('.form-input-prefix').text()).toBe('$')
      expect(wrapper.find('.form-input-suffix').text()).toBe('USD')
      // Based on the component logic, suffix takes precedence in CSS class
      expect(wrapper.find('div').classes()).toContain('form-input-wrapper--suffix')
    })
  })

  describe('Accessibility', () => {
    it('prefix and suffix have aria-hidden', () => {
      const wrapper = mount(FdsInput, {
        props: {
          id: 'test-input',
          prefix: '$',
          suffix: 'kr'
        }
      })
      
      expect(wrapper.find('.form-input-prefix').attributes('aria-hidden')).toBe('true')
      expect(wrapper.find('.form-input-suffix').attributes('aria-hidden')).toBe('true')
    })

    it('input has proper name attribute for form submission', () => {
      const wrapper = mount(FdsInput, {
        props: { id: 'form-field' }
      })
      
      expect(wrapper.find('input').attributes('name')).toBe('form-field')
    })
  })
})