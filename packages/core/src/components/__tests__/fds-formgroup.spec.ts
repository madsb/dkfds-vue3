import { describe, it, expect, vi } from 'vitest'
import { mount, VueWrapper } from '@vue/test-utils'
import { h, inject, provide, defineComponent } from 'vue'
import FdsFormgroup from '../fds-formgroup.vue'

// Mock the formId composable
vi.mock('dkfds-vue3-utils', () => ({
  formId: (id?: string, autogen?: boolean) => {
    return {
      formid: id || (autogen ? 'fid_autogenerated' : undefined)
    }
  }
}))

// Helper component to test injection
const InjectionTestComponent = defineComponent({
  setup() {
    const injectedFormId = inject('formid', null)
    return { injectedFormId }
  },
  render() {
    return h('div', { 'data-testid': 'injected-formid' }, this.injectedFormId)
  }
})

describe('FdsFormgroup', () => {
  let wrapper: VueWrapper<any>

  describe('Rendering', () => {
    it('renders div with form-group class', () => {
      wrapper = mount(FdsFormgroup)
      expect(wrapper.find('div').classes()).toContain('form-group')
    })

    it('renders slot content', () => {
      wrapper = mount(FdsFormgroup, {
        slots: {
          default: '<input type="text" />'
        }
      })
      
      expect(wrapper.find('input').exists()).toBe(true)
    })

    it('passes formid to slot', () => {
      wrapper = mount(FdsFormgroup, {
        props: { id: 'test-form' },
        slots: {
          default: `<template #default="{ formid }">
            <div data-testid="slot-formid">{{ formid }}</div>
          </template>`
        }
      })
      
      expect(wrapper.find('[data-testid="slot-formid"]').text()).toBe('test-form')
    })

    it('adds key attribute with formid value', () => {
      wrapper = mount(FdsFormgroup, {
        props: { id: 'test-form' }
      })
      
      // Vue uses the key internally, we can verify the formid is correct
      expect(wrapper.vm.formid).toBe('test-form')
    })
  })

  describe('Props', () => {
    it('generates id when not provided', () => {
      wrapper = mount(FdsFormgroup)
      expect(wrapper.vm.formid).toBe('fid_autogenerated')
    })

    it('uses provided id', () => {
      wrapper = mount(FdsFormgroup, {
        props: { id: 'custom-form' }
      })
      expect(wrapper.vm.formid).toBe('custom-form')
    })

    it('has correct default isValid prop', () => {
      wrapper = mount(FdsFormgroup)
      expect(wrapper.vm.isValid).toBe(true)
    })
  })

  describe('Validation state', () => {
    it('does not add form-error class when isValid is true', () => {
      wrapper = mount(FdsFormgroup, {
        props: { isValid: true }
      })
      
      expect(wrapper.find('div').classes()).not.toContain('form-error')
    })

    it('adds form-error class when isValid is false', () => {
      wrapper = mount(FdsFormgroup, {
        props: { isValid: false }
      })
      
      expect(wrapper.find('div').classes()).toContain('form-error')
    })
  })

  describe('Provide/Inject', () => {
    it('provides formid to child components', () => {
      wrapper = mount(FdsFormgroup, {
        props: { id: 'test-form' },
        slots: {
          default: h(InjectionTestComponent)
        }
      })
      
      expect(wrapper.find('[data-testid="injected-formid"]').text()).toBe('test-form')
    })

    it('injects provideIsValid when available', () => {
      // Parent component that provides isValid
      const ParentComponent = defineComponent({
        setup() {
          const isValid = false
          provide('provideIsValid', isValid)
        },
        render() {
          return h(FdsFormgroup, {}, { default: () => 'Content' })
        }
      })
      
      wrapper = mount(ParentComponent)
      
      // The formgroup should use the injected value
      expect(wrapper.findComponent(FdsFormgroup).find('div').classes()).toContain('form-error')
    })

    it('uses prop isValid when no injection is available', () => {
      wrapper = mount(FdsFormgroup, {
        props: { isValid: false }
      })
      
      expect(wrapper.find('div').classes()).toContain('form-error')
    })

    it('prioritizes injected value over prop value', () => {
      const ParentComponent = defineComponent({
        setup() {
          const isValid = false
          provide('provideIsValid', isValid)
        },
        render() {
          return h(FdsFormgroup, { isValid: true }, { default: () => 'Content' })
        }
      })
      
      wrapper = mount(ParentComponent)
      
      // Should use injected false value, not prop true value
      expect(wrapper.findComponent(FdsFormgroup).find('div').classes()).toContain('form-error')
    })
  })

  describe('Edge cases', () => {
    it('handles null id gracefully', () => {
      wrapper = mount(FdsFormgroup, {
        props: { id: null }
      })
      
      expect(wrapper.vm.formid).toBe('fid_autogenerated')
    })

    it('handles empty slot', () => {
      wrapper = mount(FdsFormgroup)
      
      expect(wrapper.find('div').text()).toBe('')
      expect(wrapper.find('div').classes()).toContain('form-group')
    })

    it('handles multiple children in slot', () => {
      wrapper = mount(FdsFormgroup, {
        slots: {
          default: `
            <label>Name</label>
            <input type="text" />
            <span>Help text</span>
          `
        }
      })
      
      expect(wrapper.find('label').exists()).toBe(true)
      expect(wrapper.find('input').exists()).toBe(true)
      expect(wrapper.find('span').exists()).toBe(true)
    })
  })

  describe('Integration scenarios', () => {
    it('works with form elements using provided formid', () => {
      const FormFieldComponent = defineComponent({
        setup() {
          const formid = inject('formid', 'default-id')
          return { formid }
        },
        template: `
          <div>
            <label :for="formid">Label</label>
            <input :id="formid" type="text" />
          </div>
        `
      })
      
      wrapper = mount(FdsFormgroup, {
        props: { id: 'test-field' },
        slots: {
          default: h(FormFieldComponent)
        }
      })
      
      const label = wrapper.find('label')
      const input = wrapper.find('input')
      
      expect(label.attributes('for')).toBe('test-field')
      expect(input.attributes('id')).toBe('test-field')
    })

    it('updates classes reactively when isValid changes', async () => {
      wrapper = mount(FdsFormgroup, {
        props: { isValid: true }
      })
      
      expect(wrapper.find('div').classes()).not.toContain('form-error')
      
      await wrapper.setProps({ isValid: false })
      
      expect(wrapper.find('div').classes()).toContain('form-error')
    })
  })

  describe('Accessibility', () => {
    it('provides semantic form grouping', () => {
      wrapper = mount(FdsFormgroup, {
        slots: {
          default: `
            <label>Field Label</label>
            <input type="text" />
            <span>Help text</span>
          `
        }
      })
      
      // The form-group class provides visual grouping
      // Child elements are semantically grouped within the div
      const formGroup = wrapper.find('.form-group')
      expect(formGroup.element.children.length).toBe(3)
    })

    it('maintains error state visibility', () => {
      wrapper = mount(FdsFormgroup, {
        props: { isValid: false }
      })
      
      // The form-error class provides visual feedback for error state
      expect(wrapper.find('div').classes()).toContain('form-error')
    })
  })
})